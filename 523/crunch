#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright © 2013-2014 Martin Ueding <dev@martin-ueding.de>
# Licensed under The GNU Public License Version 2 (or later)

import json

import matplotlib.pyplot as pl
import numpy as np
import scipy.optimize as op
import scipy.misc
import unitprint

def hall_offset(T):
    '''
    Berechnet den Hall Offset und gibt eine Umrechnungsfunktion zurück.

    :param dict T: Globales Template dice
    :return: Umrechnungsfunktion
    :rtype: function
    '''
    data = np.loadtxt(Daten/Remanenz.txt)
    rem_unten = data[:,0]
    rem_oben = data[:,1]
    rem_mittel = rem_oben-rem_unten
    offset = np.mean(rem_mittel)
    d_offset = np.std(rem_mittel)

    T['tab_remanenz' = list(zip(
        unitprint.siunitx(rem_unten),
        unitprint.siunitx(rem_oben)
        ))

    T['hall_offset'] = unitprint.siunitx(offset, d_offset)

    def umrechner(skalen, fehler):
        '''
        Rechnet Skalenwerte in Skalenwerte ohne Offset um.

        :param float skalen: Skalenteile mit Offset
        :param float fehler: Fehler in Skalenteilen
        :return: Wert und Fehler
        :rtype: tuple
        '''
        neu_wert = skalen - offset
        neu_fehler = np.sqrt(fehler**2 + d_offset**2)

        return neu_wert, neu_fehler

    return umrechner

def spektrum_edit(T, basename, umrechner):
    data = np.loadtxt('Daten/{}.txt'.format(basename))

    untergrund = data[0,1]
    d_untergrung = np.sqrt(untergrund)

    hall = data[1:,0]
    d_hall = 0.3

    ereignisse = data[1:,1] - untergrund
    d_ereignisse = np.sqrt(ereignisse + d_untergrund**2)

    hall, d_hall = umrechner(hall, d_hall)

    tabelle = np.column_stack([hall, d_hall, ereignisse, d_ereignisse])
    np.savetxt('Daten/{}_bearb.txt'.format(basename), tabelle)

    T[basename] = list(zip(
        unitprint.siunitx(hall, d_hall),
        unitprint.siunitx(ereignisse, d_ereignisse)
        ))


def main():
    T = {}

    umrechner = hall_offset(T)
    spektrum_edit(T, '01-Cs-40s', umrechner)
    spektrum_edit(T, '02-Cs-40s', umrechner)
    spektrum_edit(T, '03-Cs-100s', umrechner)
    spektrum_edit(T, '01-Cs-40', umrechner)

    with open('_build/template.js', 'w') as f:
        json.dump(dict(T), f, indent=4, sort_keys=True)

if __name__ == "__main__":
    main()
