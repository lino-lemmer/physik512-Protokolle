#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright © 2013-2014 Martin Ueding <dev@martin-ueding.de>
# Licensed under The GNU Public License Version 2 (or later)

import json

import matplotlib.pyplot as pl
import numpy as np
import scipy.optimize as op
import scipy.misc
import unitprint

def gauss(x, mean, stddev, amplitude):
    return amplitude * np.exp(- ((x - mean) / stddev)**2)

def linear(x, a, b):
    return x * a + b

def exp_sec_deg(x, a, b, c, d):
    return a * np.exp(b * x) + c * np.exp(d * x)

def fit_peak(T, filename, lower, upper, p0, prefix, impuls, linie, show=False):
    data = np.loadtxt(filename)
    bins = data[:, 0]
    counts = data[:, 1]

    fit_bins = bins[lower:upper]
    fit_counts = counts[lower:upper]

    popt, pconv = op.curve_fit(gauss, fit_bins, fit_counts, p0=p0)
    d = np.sqrt(pconv.diagonal())
    x = np.linspace(np.min(fit_bins), np.max(fit_bins), 1000)
    y = gauss(x, *popt)

    T['{}_{}_mean_spannung'.format(prefix, linie)] = unitprint.siunitx(popt[0], d[0])
    T['{}_{}_std_spannung'.format(prefix, linie)] = unitprint.siunitx(popt[1], d[1])

    np.savetxt('_build/fit_{}_{}.txt'.format(prefix, linie), np.column_stack([x, y]))

    if show:
        pl.plot(bins, counts)
        pl.plot(fit_bins, fit_counts)
        pl.plot(x, y)
        pl.show()

    return (popt[0], d[0], abs(popt[1]), d[1], impuls)

def fit_gauge_points(T, points, show=False):
    p = np.array(points)
    hall = p[:, 0]
    d_hall = p[:, 1]
    width_val = p[:, 2]
    width_err = p[:, 3]
    impuls = p[:, 4]/1e15
    popt, pconv = op.curve_fit(linear, hall, impuls)
    popt *= 1e15
    pconv *= 1e15
    d = np.sqrt(pconv.diagonal())

    points_table = np.column_stack([hall[1:], impuls[1:]*1e15, d_hall[1:]])
    np.savetxt('_build/impulseichung_data.txt', points_table)
    T['fit_impulseichung_data'] = list(zip(
        unitprint.siunitx(hall, d_hall),
        unitprint.siunitx(width_val, width_err),
        unitprint.siunitx(impuls),
    ))

    hall = hall[1:]
    x = np.linspace(np.min(hall)-2, np.max(hall)+1, 10)
    y = linear(x, *popt)

    T['fit_impulseichung_steigung'] = unitprint.siunitx(popt[0], d[0])
    T['fit_impulseichung_offset'] = unitprint.siunitx(popt[1], d[1])

    fit_table = np.column_stack([x, y])
    np.savetxt('_build/fit_impulseichung.txt', fit_table)

    return popt, pconv

def impulseichung(T):
    gauge_points = [(0,0,0,0,0)]

    # Energien der Konversionslinien berechnen
    m_e = 9.1e-31
    c = 3e8
    gamma = 661.66
    T['energie_gamma'] = gamma
    K_bindung = 37.441
    T['energie_K_bindung'] = K_bindung
    L_bindung_1 = 5.987
    T['energie_L_bindung_1'] = K_bindung
    L_bindung_2 = 5.624
    T['energie_L_bindung_2'] = K_bindung
    L_bindung_3 = 5.247
    T['energie_L_bindung_3'] = K_bindung
    L_bindung = np.mean([L_bindung_1, L_bindung_2, L_bindung_3])
    dL_bindung = np.std([L_bindung_1, L_bindung_2, L_bindung_3])
    T['energie_L_bindung'] = unitprint.siunitx(L_bindung, dL_bindung)
    # Energien in Impulse mit natürlich Einheiten umrechnen
    K = np.sqrt(((gamma - K_bindung)/(m_e*c**2))**2-1)
    T['impuls_K_konversion'] = unitprint.siunitx(K)
    L = np.sqrt(((gamma - L_bindung)/(m_e*c**2))**2-1)
    dL = (gamma - L_bindung)/(m_e*c**2)**2/L
    T['impuls_L_konversion'] = unitprint.siunitx(L, dL)

    gauge_points.append(fit_peak(T, '_build/02-Cs-40s_bearb.txt', 12, 26, [155.8, 3, 5], 'konversion_40', K,'K'))
    gauge_points.append(fit_peak(T, '_build/02-Cs-40s_bearb.txt', 26, 35, [159.2, 4, 2], 'konversion_40', L,'L'))

    gauge_points.append(fit_peak(T, '_build/03-Cs-100s_bearb.txt', 14, 24, [157.8, 3, 6], 'konversion_100', K,'K'))
    gauge_points.append(fit_peak(T, '_build/03-Cs-100s_bearb.txt', 24, 34, [162, 4, 2], 'konversion_100', L,'L'))

    popt, pconv = fit_gauge_points(T, gauge_points)

    kurie(T, popt, pconv, '04-Tl-80s', 80)
    #kurie(T, popt, pconv, '05-Na-200s', 200)

def kurie(T, popt, pconv, basename, time):
    data = np.loadtxt('_build/{}_bearb.txt'.format(basename))
    H = data[:,0]
    N = data[:,1]
    d_H = data[:,2]
    d_N = data[:,3]

    m_e = 9.1e-31
    c = 3e8
    
    rate = N/time
    d_rate = d_N/time
    impuls = H * popt[0] + popt[1]
    d_impuls = np.sqrt((popt[0]*d_H)**2 + (H*pconv[0,0])**2 + (pconv[1,1])**2)
    energy = np.sqrt(1 + impuls**2)
    d_energy = impuls/energy*d_impuls

    if basename == '04-Tl-80s':
        popt, pconv = fermi('fermi_Tl.txt')
        print(popt)
        F = exp_sec_deg(impuls/(m_e*c), *popt)
    else:
        popt, pconv = fermi('fermi_Na.txt')
        F = exp_sec_deg(energy, *popt)

    print(F)

    K = np.sqrt(rate/(F*impuls*energy))

    print(K)

    T['Kurie_{}'.format(basename)] = list(zip(
        unitprint.siunitx(energy, d_energy),
        unitprint.siunitx(K)))

    np.savetxt('_build/Kurie_{}.txt'.format(basename), np.columnstack([energy, K, d_energy]))


def fermi(filename):
    data = np.loadtxt('Daten/{}'.format(filename))
    x = data[:,0]
    F = data[:,1]

    popt, pconv = op.curve_fit(exp_sec_deg, x, F)

    return popt, pconv


def aufloesung(Tlist, value, width, converter):
    sigma_val = converter(width) - converter(0)
    fwhm_val = sigma_val * 2 * np.sqrt(2 * np.log(2))

    sigma_err = scipy.misc.derivative(converter, width)
    fwhm_err = sigma_err * 2 * np.sqrt(2 * np.log(2))

    Tlist.append([
        value,
        unitprint.siunitx(fwhm_val, fwhm_err),
        unitprint.siunitx(value/fwhm_val, value/fwhm_val**2 * fwhm_err),
    ])

def hall_offset(T):
    '''
    Berechnet den Hall Offset und gibt eine Umrechnungsfunktion zurück.

    :param dict T: Globales Template dice
    :return: Umrechnungsfunktion
    :rtype: function
    '''
    data = np.loadtxt('Daten/Remanenz.txt')
    rem_unten = data[:,0]
    rem_oben = data[:,1]
    rem_mittel = rem_oben-rem_unten
    offset = np.mean(rem_mittel)
    d_offset = np.std(rem_mittel)

    T['tab_remanenz'] = list(zip(
        unitprint.siunitx(rem_unten),
        unitprint.siunitx(rem_oben)
        ))

    T['hall_offset'] = unitprint.siunitx(offset, d_offset)

    def umrechner(skalen, fehler):
        '''
        Rechnet Skalenwerte in Skalenwerte ohne Offset um.

        :param float skalen: Skalenteile mit Offset
        :param float fehler: Fehler in Skalenteilen
        :return: Wert und Fehler
        :rtype: tuple
        '''
        neu_wert = skalen - offset
        neu_fehler = np.sqrt(fehler**2 + d_offset**2)

        return neu_wert, neu_fehler

    return umrechner

def spektrum_edit(T, basename, templatename, umrechner):
    data = np.loadtxt('Daten/{}.txt'.format(basename))

    untergrund = data[0,1]

    if templatename == 'Tl_80s':
        d_untergrund = 20
    else:
        d_untergrund = np.sqrt(untergrund)

    hall = data[1:,0]
    d_hall = np.ones(hall.shape) * 0.3

    ereignisse = data[1:,1]
    d_ereignisse = np.sqrt(ereignisse)

    T['{}_mess'.format(templatename)] = list(zip(
        unitprint.siunitx(hall, d_hall),
        unitprint.siunitx(ereignisse, d_ereignisse)
        ))

    T['{}_untergrund'.format(templatename)] = unitprint.siunitx(untergrund, d_untergrund)

    ereignisse -= untergrund
    d_ereignisse = np.sqrt(ereignisse + d_untergrund**2)

    hall, d_hall = umrechner(hall, d_hall)

    ereignisse /= np.abs(hall)
    d_ereignisse = np.sqrt((d_ereignisse/hall)**2+(ereignisse*d_hall/hall**2)**2)
    tabelle = np.column_stack([hall, ereignisse, d_hall, d_ereignisse])
    np.savetxt('_build/{}_bearb.txt'.format(basename), tabelle)

    T[templatename] = list(zip(
        unitprint.siunitx(hall, d_hall),
        unitprint.siunitx(ereignisse, d_ereignisse)
        ))


def main():
    T = {}

    umrechner = hall_offset(T)
    spektrum_edit(T, '01-Cs-40s', 'Cs_40s_kompl', umrechner)
    spektrum_edit(T, '02-Cs-40s', 'Cs_40s_ausschn', umrechner)
    spektrum_edit(T, '03-Cs-100s', 'Cs_100s', umrechner)
    spektrum_edit(T, '04-Tl-80s', 'Tl_80s', umrechner)
    spektrum_edit(T, '05-Na-200s', 'Na_200s', umrechner)
    impulseichung(T)

    with open('_build/template.js', 'w') as f:
        json.dump(dict(T), f, indent=4, sort_keys=True)

if __name__ == "__main__":
    main()
