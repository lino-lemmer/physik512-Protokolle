#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright © 2013 Martin Ueding <dev@martin-ueding.de>
# Licensed under The GNU Public License Version 2 (or later)

#import scipy.interpolate
import argparse
import colorsys
import glob
import json
import logging
import matplotlib.pyplot as pl
import multiprocessing
import numpy as np
import os.path
import pprint
import re
import scipy.optimize as op
import scipy.signal
import sys
import unitprint

savefig_options = {
    'bbox_inches': 'tight',
}

lambda_cd = 6438.470e-10

def coloriter(n):
    return iter([
        colorsys.hsv_to_rgb(x*1.0/n, 1.0, .8)
        for x in range(n)
    ])

def dampfdruck(T):
    return np.exp(10.55 - 3333/T - 0.85 * np.log(T)) * 133.322

def linear(x, a):
    return a * x

def polynom(x, a, b, c, d):
    return a + b*x + c*x**2 + d*x**3

def gauss(x, m, s, a):
    return a * np.exp(- 0.5 * ((x - m)/s)**2)

def single_gauss(x, m1, s1, a1, offset):
    return gauss(x, m1, s1, a1) + offset

def tripple_gauss(x, m1, s1, a1, m2, s2, a2, m3, s3, a3, offset):
    return gauss(x, m1, s1, a1) + gauss(x, m2, s2, a2) + gauss(x, m3, s3, a3) + offset

def magnetfeldkalibrierung(T):
    data = np.genfromtxt('Messdaten/Magnetfeldkalibrierung_1.txt', skip_header=1)
    I = data[:, 2]
    B = data[:, 1] * 10**-3

    used = I < 8

    I_used = I[used]
    B_used = B[used]

    popt, pconv = op.curve_fit(polynom, I_used, B_used)
    fit_x = np.linspace(np.min(I_used), np.max(I_used))
    fit_y = polynom(fit_x, *popt)

    coeff_err = np.sqrt(pconv.diagonal())

    T['mfk_a'] = unitprint.siunitx(popt[0]/10**-3, coeff_err[0]/10**-3)
    T['mfk_b'] = unitprint.siunitx(popt[1]/10**-3, coeff_err[1]/10**-3)
    T['mfk_c'] = unitprint.siunitx(popt[2]/10**-3, coeff_err[2]/10**-3)
    T['mfk_d'] = unitprint.siunitx(popt[3]/10**-6, coeff_err[3]/10**-6)

    pl.plot(I_used, B_used, linestyle='none', marker='+', label='Messdaten')
    pl.plot(fit_x, fit_y, label='Anpassung')
    pl.xlabel(r'$I / \mathrm{A}$')
    pl.ylabel(r'$B / \mathrm{T}$')
    pl.legend(loc='best')
    pl.grid(True)
    pl.savefig('_build/Magnetfeldkalibrierung.pdf', **savefig_options)
    pl.clf()

    return lambda I: polynom(I, *popt)

def qualitativ_finesse(T, B, bohr_val, bohr_err):
    I_crit_long_val = 1.9
    I_crit_trans_val = 1.0

    B_crit_long_val = B(I_crit_long_val)
    B_crit_trans_val = B(I_crit_trans_val)

    Delta_E_long_val = bohr_val * B_crit_long_val
    Delta_E_trans_val = bohr_val * B_crit_trans_val

    N_long_val = 6.626e-34 * 3e8 / lambda_cd / Delta_E_long_val
    N_trans_val = 6.626e-34 * 3e8 / lambda_cd / Delta_E_trans_val

    T['I_crit_long'] = unitprint.siunitx(I_crit_long_val)
    T['I_crit_trans'] = unitprint.siunitx(I_crit_trans_val)

    T['B_crit_long'] = unitprint.siunitx(B_crit_long_val / 1e-2)
    T['B_crit_trans'] = unitprint.siunitx(B_crit_trans_val / 1e-2)

    T['N_long'] = unitprint.siunitx(N_long_val)
    T['N_trans'] = unitprint.siunitx(N_trans_val)

def einzel_fit(data, I, min_, max_, p0):
    logging.info('Fit für {}'.format(I))

    lambda_ = data[I][0]
    intens = data[I][1]

    selected = lambda_[min_ < lambda_] < max_

    lambda_selected = lambda_[selected]
    intens_selected = intens[selected]

    logging.info('lambda_selected')
    logging.info(lambda_selected)
    logging.info('intens_selected')
    logging.info(intens_selected)

    p0[2] -= p0[-1]
    if len(p0) >= 10:
        p0[5] -= p0[-1]
        p0[8] -= p0[-1]

    p = pl.figure()
    a = p.add_subplot(1, 1, 1)
    a.plot(lambda_selected / 10**-7, intens_selected, linestyle='none', marker='+', label='Daten')

    returnval = None

    try:
        funktion = tripple_gauss if len(p0) == 10 else single_gauss
        logging.info(funktion)
        popt, pconv = op.curve_fit(funktion, lambda_selected, intens_selected, p0=p0)
        x = np.linspace(np.min(lambda_selected), np.max(lambda_selected), 1000)
        a.plot(x / 10**-7, funktion(x, *popt), label='Anpassung')

        logging.info('Fitparameter')
        logging.info(popt[0:3])

        if len(p0) == 10:
            a.plot(x / 10**-7, gauss(x, *popt[0:3]), label='Summand 1', linestyle='--')
            a.plot(x / 10**-7, gauss(x, *popt[3:6]), label='Summand 2', linestyle='--')
            a.plot(x / 10**-7, gauss(x, *popt[6:9]), label='Summand 3', linestyle='--')

            logging.info(popt[3:6])
            logging.info(popt[6:9])

        a.plot(x / 10**-7, np.ones(x.size) * popt[-1], label='Untergrund', linestyle='--')

        logging.info(popt[-1])
        logging.info('Fit Fehler')
        err = np.sqrt(abs(pconv.diagonal()))
        logging.info(err)

        returnval = [I] + list(popt) + list(err)
    except RuntimeError as e:
        logging.error(e)
    except AttributeError as e:
        logging.error(e)

    a.grid(True)
    a.legend(loc='best')
    #a.set_title(r'$I = {}$'.format(I))
    a.set_xlabel(r'$\lambda/10^{-7}\,\mathrm{m}$')
    a.set_ylabel(r'rel. Int.')
    p.savefig('_build/Fit-{}.pdf'.format(str(I).replace('.', ',')), **savefig_options)

    return returnval

def fit_aufspaltungen(T, fe, B):
    I = fe[:, 0]

    B_I = B(I)

    s1_val = fe[:, 1]
    s1_err = fe[:, 11]

    s2_val = fe[:, 4]
    s2_err = fe[:, 14]

    s3_val = fe[:, 7]
    s3_err = fe[:, 17]

    std1_val = fe[:, 2]
    std2_val = fe[:, 5]
    std3_val = fe[:, 8]

    lambda0 = s2_val

    f = pl.figure()
    a = f.add_subplot(1, 1, 1)

    plotargs = {
        #'linestyle': 'none',
        'marker': '+',
    }

    x1_val = np.abs(s1_val - s2_val)
    x1_err = np.sqrt(std1_val**2 + std2_val**2)

    x2_val = np.abs(s3_val - s2_val)
    x2_err = np.sqrt(std3_val**2 + std1_val**2)

    x_val = np.array([np.mean([a, b]) for a, b in zip(x1_val, x2_val)])
    x_err = np.array([np.sqrt(a**2 + b**2)/2 for a, b in zip(x1_err, x2_err)])

    Delta_E_val = 6.626e-34 * 3e8 / lambda0**2 * x_val
    Delta_E_err = 6.626e-34 * 3e8 / lambda0**2 * x_err

    T['energieaufspaltung_tabelle'] = list(zip(
        unitprint.siunitx(B_I / 10**-2),
        unitprint.siunitx(x_val / 10**-12),
        unitprint.siunitx(Delta_E_val/1e-25, Delta_E_err/1e-25),
    ))

    popt, pconv = op.curve_fit(linear, B_I, Delta_E_val, sigma=1/Delta_E_err)
    fit_x = np.linspace(np.min(B_I), np.max(B_I))
    fit_y = linear(fit_x, *popt)

    f = pl.figure()
    a = f.add_subplot(1, 1, 1)
    a.errorbar(B_I, Delta_E_val, yerr=Delta_E_err, linestyle='none', marker='+') 
    a.plot(fit_x, fit_y)
    a.set_xlabel(r'$B/\mathrm{T}$')
    a.set_ylabel(r'$\Delta E/\mathrm{J}$')
    a.grid(True)
    f.savefig('_build/Energieaufspaltung.pdf', **savefig_options)

    bohr_manuell_val = np.median(Delta_E_val / B_I)
    bohr_manuell_err = np.median(Delta_E_err / B_I)

    bohr_val = popt[0]
    bohr_err = np.sqrt(pconv.diagonal()[0])

    T['bohr_magneton'] = unitprint.siunitx(bohr_val, bohr_err)
    T['bohr_magneton_manuell'] = unitprint.siunitx(bohr_manuell_val, bohr_manuell_err)
    
    logging.info(popt)

    return bohr_val, bohr_err

def fh_peaks(T, sets):
    upper_limit = 35
    T['upper_limit'] = unitprint.siunitx(upper_limit)

    for s in sets:
        f = pl.figure()
        a = f.add_subplot(1, 1, 1)

        selection = s['U_B'] <= upper_limit

        pl.plot(s['U_B'], s['U_A'], linestyle='none', marker='.')

        try:
            popt, pconv = op.curve_fit(
                fh_gauss, s['U_B'][selection], s['U_A'][selection],
                p0=[
                    12, 5.0, 1,
                    0.4, 1.8, 3.6, 6.0, 10.1,
                    2/35,
                ]
            )

            x = np.linspace(np.min(s['U_B'][selection]), np.max(s['U_B'][selection]), 1000)
            y = fh_gauss(x, *popt)
            pl.plot(x, y)
            s['popt'] = popt
            s['perr'] = np.sqrt(pconv.diagonal())

            abstand_val = s['popt'][1]
            abstand_err = s['perr'][1]

            k_val = abstand_val * 1.609e-19 / 6.626e-34 / 3e8
            k_err = abstand_err * 1.609e-19 / 6.626e-34 / 3e8

            lambda_val = 1 / k_val
            lambda_err = 1 / k_val**2 * k_err

            s['k_val'] = k_val
            s['k_err'] = k_err

            s['lambda_val'] = lambda_val
            s['lambda_err'] = lambda_err
        except RuntimeError as e:
            logging.error(e)
        except AttributeError as e:
            logging.error(e)

        a.set_xlabel(r'$U_\mathrm{B}/\mathrm{V}$')
        a.set_ylabel(r'$U_\mathrm{A}/\mathrm{V}$')
        a.grid(True)
        filename = 'FH_{T}_{U_G}'.format(**s).replace('.', ',')+'.pdf'
        s['filename'] = filename
        f.savefig(os.path.join('_build', filename), **savefig_options)

def fh_roh_plot(sets):
    f = pl.figure()
    a = f.add_subplot(1, 1, 1)
    for s in sets:
        a.plot(
            s['U_B'], s['U_A'],
            label=r'$T={T:.3g}\,\mathrm{{K}},\;U_\mathrm{{G}}={U_G:.3g}\,\mathrm{{V}}$'.format(**s),
            linestyle='none', marker='.',
        )
    a.set_xlabel(r'$U_\mathrm{B}/\mathrm{V}$')
    a.set_ylabel(r'$U_\mathrm{A}/\mathrm{V}$')
    a.grid(True)
    a.legend(loc='best')
    f.savefig('_build/FH_Rohdaten.pdf', **savefig_options)

def fh_gauss(U_B, U_B_min, abstand, breite, a1, a2, a3, a4, a5, steigung):
    summands = []
    summands.append(gauss(U_B, U_B_min + 1*abstand, breite, a1))
    summands.append(gauss(U_B, U_B_min + 2*abstand, breite, a2))
    summands.append(gauss(U_B, U_B_min + 3*abstand, breite, a3))
    summands.append(gauss(U_B, U_B_min + 4*abstand, breite, a4))
    summands.append(gauss(U_B, U_B_min + 5*abstand, breite, a5))

    summands.append(linear(U_B, steigung))

    return sum(summands)

def job_doppler(T):
    m_cd = 112.4
    nu_cd = 3e8 / lambda_cd
    Delta_nu = 7.16e-7 * nu_cd * np.sqrt(1000 / m_cd)
    Delta_lambda = 3e8 / nu_cd**2 * Delta_nu

    T['m_cd'] = unitprint.siunitx(m_cd)
    T['doppler_width_nu'] = unitprint.siunitx(Delta_nu)
    T['doppler_width_lambda'] = unitprint.siunitx(Delta_lambda / 10**-12)

def job_zeeman(T):
    B = magnetfeldkalibrierung(T)

    d = 4e-3
    n = 1.457

    T['lambda_cd'] = unitprint.siunitx(lambda_cd, digits=7)

    global m_max
    m_max = np.round(2 * n * d / lambda_cd)

    logging.info('m_max', m_max)

    T['m_max'] = m_max
    
    alles_fig = pl.figure()
    alles = alles_fig.add_subplot(1, 1, 1)

    files = glob.glob('Messdaten/Mit_*.txt')
    files.sort()
    citer = coloriter(len(files))
    pattern = re.compile('Messdaten/Mit_(\d+(.\d+)?).txt')
    data = {}
    for file_ in files:
        m = pattern.match(file_)
        if m:
            I = float(m.group(1))

        file_content = np.genfromtxt(file_, skip_header=1)
        alpha = np.radians(file_content[:, 0])
        intens = file_content[:, 1]

        color = next(citer)
        label = r'$B = {:.2g} \, \mathrm{{cT}}$'.format(B(I) * 100)
        alles.plot(alpha, intens, label=label, color=color)

        cut = alpha < 0
        alpha = alpha[cut]
        intens = intens[cut]
        lambda_ =  2 * n * d * np.cos(alpha / n) / (m_max - 1)

        data[I] = (lambda_, intens)

    alles.set_xlabel(r'$\alpha / \mathrm{rad}$')
    alles.set_ylabel(r'rel. Int.')
    alles.legend(loc='best')
    alles.grid(True)
    alles_fig.savefig('_build/Alles.pdf', **savefig_options)

    zoom_fig = pl.figure()
    zoom = zoom_fig.add_subplot(1, 1, 1)
    citer = coloriter(len(data))

    for I, (lambda_, intens) in sorted(data.items()):
        color = next(citer)
        label = r'$B = {:.2g} \, \mathrm{{cT}}$'.format(B(I) * 100)
        selection = lambda_[6.4375e-7 < lambda_] < 6.440e-7
        zoom.plot(lambda_[selection] / 10**-7, intens[selection], label=label, color=color)

    zoom.set_xlabel(r'$\lambda / 10^{-7}\,\mathrm{m}$')
    zoom.set_ylabel(r'rel. Int.')
    zoom.grid(True)
    zoom_fig.savefig('_build/Zoom.pdf', **savefig_options)

    zoom_dreifach_fig = pl.figure()
    zoom_dreifach = zoom_dreifach_fig.add_subplot(1, 1, 1)
    citer = coloriter(len(data))

    for I, (lambda_, intens) in sorted(data.items()):
        selection = lambda_[6.4368e-7 < lambda_] < 6.4395e-7
        zoom_dreifach.plot(lambda_[selection] / 10**-7, intens[selection])
        break

    zoom_dreifach.set_xlabel(r'$\lambda / m$')
    zoom_dreifach.set_ylabel(r'rel. Int.')
    zoom_dreifach.grid(True)
    zoom_dreifach_fig.savefig('_build/Zoom_dreifach.pdf', **savefig_options)

    T['I_list'] = [str(x).replace('.', ',') for x in sorted(data.keys())]

    T['B_dict'] = {
        str(I_).replace('.', ','): unitprint.siunitx(B(I_)/10**-2)
        for I_ in data.keys()
    }

    fit_ergebnisse = []

    fit_ergebnisse.append(einzel_fit(
        data, 0.0, 6.43821e-7, 6.43857e-7,
        [6.43838e-7, 26e-13, 15, 6.43839e-7, 29e-13, 20, 6.43841e-7, 27e-13, 15, 3]
    ))

    fit_ergebnisse.append(einzel_fit(
        data, 1.0, 6.43821e-7, 6.43857e-7,
        [6.43837e-7, 30e-13, 16, 6.43839e-7, 33e-13, 24, 6.43842e-7, 30e-13, 18, 4]
    ))

    fit_ergebnisse.append(einzel_fit(
        data, 2.0, 6.43821e-7, 6.43857e-7,
        [6.43836e-7, 27e-13, 21, 6.43839e-7, 29e-13, 31, 6.43843e-7, 27e-13, 22, 5]
    ))

    fit_ergebnisse.append(einzel_fit(
        data, 3.0, 6.43821e-7, 6.43857e-7,
        [6.43833e-7, 21e-13, 21, 6.43839e-7, 26e-13, 36, 6.43845e-7, 21e-13, 25, 5]
    ))

    fit_ergebnisse.append(einzel_fit(
        data, 4.0, 6.43821e-7, 6.43857e-7,
        [6.43832e-7, 22e-13, 21, 6.43839e-7, 29e-13, 38, 6.43846e-7, 23e-13, 28, 6]
    ))

    fit_ergebnisse.append(einzel_fit(
        data, 4.5, 6.43821e-7, 6.43857e-7,
        [6.43832e-7, 22e-13, 23, 6.43839e-7, 29e-13, 39, 6.43846e-7, 23e-13, 30, 7]
    ))

    fit_ergebnisse.append(einzel_fit(
        data, 5.0, 6.43821e-7, 6.43857e-7,
        [6.43832e-7, 22e-13, 23, 6.43839e-7, 29e-13, 39, 6.43846e-7, 23e-13, 30, 8]
    ))

    fit_ergebnisse.append(einzel_fit(
        data, 5.5, 6.43821e-7, 6.43857e-7,
        [6.43831e-7, 22e-13, 23, 6.43839e-7, 29e-13, 39, 6.43847e-7, 23e-13, 30, 8]
    ))

    fit_ergebnisse.append(einzel_fit(
        data, 6.0, 6.43821e-7, 6.43857e-7,
        [6.43831e-7, 22e-13, 23, 6.43839e-7, 29e-13, 39, 6.43847e-7, 23e-13, 30, 8]
    ))

    fit_ergebnisse.append(einzel_fit(
        data, 7.0, 6.43821e-7, 6.43857e-7,
        [6.43829e-7, 21e-13, 27, 6.43839e-7, 28e-13, 45, 6.43850e-7, 23e-13, 33, 12]
    ))

    fit_ergebnisse.append(einzel_fit(
        data, 8.0, 6.43821e-7, 6.43857e-7,
        [6.43827e-7, 21e-13, 27, 6.43839e-7, 28e-13, 45, 6.43851e-7, 23e-13, 33, 14]
    ))

    fit_ergebnisse = np.array([x for x in fit_ergebnisse if x is not None])

    logging.info('fit_ergebnisse')
    logging.info(fit_ergebnisse)

    T['fit_tabelle'] = list(zip(
        unitprint.siunitx(fit_ergebnisse[:, 0]),
        unitprint.siunitx(B(fit_ergebnisse[:, 0])/10**-2),
        unitprint.siunitx(fit_ergebnisse[:, 1]/10**-9, fit_ergebnisse[:, 2]/10**-9),
        unitprint.siunitx(fit_ergebnisse[:, 4]/10**-9, fit_ergebnisse[:, 5]/10**-9),
        unitprint.siunitx(fit_ergebnisse[:, 7]/10**-9, fit_ergebnisse[:, 8]/10**-9),
    ))

    bohr_val, bohr_err = fit_aufspaltungen(T, fit_ergebnisse, B)

    qualitativ_finesse(T, B, bohr_val, bohr_err)

def job_theoretische_finesse(T):
    d = 4e-3
    n = 1.457
    r = 0.85

    finesse = np.pi * np.sqrt(r) / (1 - r)

    frequenz = 3e8 / lambda_cd
    Delta_frequenz = 3e8 / (2 * n * d)

    Delta_lambda = 3e8 / frequenz**2 * Delta_frequenz
    N = lambda_cd / Delta_lambda

    T['finesse_theoretisch'] = unitprint.siunitx(finesse)
    T['N_theoretisch'] = unitprint.siunitx(N)

def job_franck_hertz(T):
    files = glob.glob('Messdaten/FH_*.txt')
    files.sort()
    pattern = re.compile('Messdaten/FH_(.+)_(.+)\.txt')
    sets = []
    for file_ in files:
        m = pattern.match(file_)
        data = np.genfromtxt(file_, skip_header=1)
        sets.append({
            'T': float(m.group(1)),
            'U_G': float(m.group(2)),
            'U_B': data[:, 0],
            'U_A': data[:, 1],
        })

    fh_roh_plot(sets)
    fh_peaks(T, sets)

    T['fh_sets'] = list([
        {
            'filename': s['filename'],
            'T': unitprint.siunitx(s['T']),
            'U_G': unitprint.siunitx(s['U_G']),
            'abstand': unitprint.siunitx(s['popt'][1], s['perr'][1]),
            'breite': unitprint.siunitx(s['popt'][2], s['perr'][2]),
            'k': unitprint.siunitx(s['k_val']*10**-2, s['k_err']*10**-2),
            'lambda': unitprint.siunitx(s['lambda_val']/10**-9, s['lambda_err']/10**-9),
        }
        for s in sets
    ])

def job_dampfdruckkurve(T):
    x = np.linspace(150 + 273.15, 165 + 273.15)
    y = dampfdruck(x)

    y_min = np.min(y)
    y_max = np.max(y)

    schwankung = (y_max - y_min) / np.mean([y_min, y_max])

    T['ddk_schwankung'] = unitprint.siunitx(schwankung)

    f = pl.figure()
    a = f.add_subplot(1, 1, 1)
    a.plot(x, y)
    a.set_xlabel(r'$T / \mathrm{K}$')
    a.set_ylabel(r'$p / \mathrm{Pa}$')
    a.grid(True)
    f.savefig('_build/Dampfdruckkurve.pdf', **savefig_options)

def job_finesse_ccd(T):
    fsr = 0.00019e-7
    fwhm = 2.35 * 0.003e-7
    finesse = fwhm/fsr

    delta_lambda = 0.00005e-7
    N = lambda_cd / delta_lambda

    T['delta_lambda_ccd'] = unitprint.siunitx(delta_lambda)
    T['finesse_ccd'] = unitprint.siunitx(finesse)
    T['fsr_ccd'] = unitprint.siunitx(fsr)
    T['fwhm_ccd'] = unitprint.siunitx(fwhm)
    T['N_ccd'] = unitprint.siunitx(N)

def setup_logging(options):
    if options.verbose == 0:
        level = logging.WARNING
    elif options.verbose == 1:
        level = logging.INFO
    elif options.verbose == 2:
        level = logging.DEBUG

    logging.basicConfig(level=level)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-v', '--verbose', action='count', default=0)
    options = parser.parse_args()

    setup_logging(options)

    with multiprocessing.Manager() as manager:
        T = manager.dict()

        l = globals()
        to_run = []
        for key, value in l.items():
            if key.startswith('job_'):
                to_run.append(value)

        logging.debug('Will run the following functions:')
        for f in to_run:
            logging.debug('-', f)

        processes = []
        for f in to_run:
            p = multiprocessing.Process(target=f, args=(T,))
            logging.debug("Starting", p)
            p.start()
            processes.append(p)

        for p in processes:
            logging.debug("Waiting for", p)
            p.join()

        assert all([p.exitcode == 0 for p in processes])

        logging.debug("Serializing …")

        with open('_build/template.js', 'w') as f:
            json.dump(dict(T), f, indent=4, sort_keys=True)

if __name__ == "__main__":
    main()
