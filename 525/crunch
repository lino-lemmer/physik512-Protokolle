#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright Â© 2013-2014 Martin Ueding <dev@martin-ueding.de>
# Licensed under The GNU Public License Version 2 (or later)

import json

import matplotlib.pyplot as pl
import numpy as np
import scipy.optimize as op
import unitprint


savefig_options = {
    'bbox_inches': 'tight',
}

c = 3e8 # m/s
R_infinity = 10973731 # 1/m
h = 6.626e-34 # J s
e = 1.609e-19

def gauss(x, mean, stddev, amplitude, offset):
    return amplitude * np.exp(- ((x - mean) / stddev)**2)

def linear(x, a, b):
    return x * a + b

def fit_peak(T, filename, lower, upper, p0, prefix, energy, show=False):
    data = np.loadtxt(filename)
    bins = data[:, 0]
    counts = data[:, 1]

    fit_bins = bins[lower:upper]
    fit_counts = counts[lower:upper]

    popt, pconv = op.curve_fit(gauss, fit_bins, fit_counts, p0=p0)
    x = np.linspace(np.min(fit_bins), np.max(fit_bins), 1000)
    y = gauss(x, *popt)

    T['{}_{}_mean_kanal'.format(prefix, energy)] = unitprint.siunitx(popt[0])
    T['{}_{}_std_kanal'.format(prefix, energy)] = unitprint.siunitx(popt[1])

    np.savetxt('_build/fit_{}_{}.txt'.format(prefix, energy), np.column_stack([x, y]))

    if show:
        pl.plot(bins, counts)
        pl.plot(fit_bins, fit_counts)
        pl.plot(x, y)
        pl.show()

    return [popt[0], energy]

def fit_gauge_points(T, points, prefix, show=False):
    p = np.array(points)
    energy = p[:, 1]
    channel = p[:, 0]

    popt, pconv = op.curve_fit(linear, channel, energy)

    np.savetxt('_build/fit_detektor_'+prefix+'_data.txt', np.column_stack([channel, energy]))

    x = np.linspace(np.min(channel), np.max(channel), 10)
    y = linear(x, *popt)

    if show:
        pl.plot(channel, energy, marker='+', linestyle='none')
        pl.plot(x, y)
        pl.show()

    np.savetxt('_build/fit_detektor_'+prefix+'_fit.txt', np.column_stack([x, y]))

def job_energieeichung_links(T):
    gauge_points = []

    gauge_points.append(fit_peak(T, 'Daten/005-Na-Zoom.txt', 5800, 7000, [6400, 500, 35, 0], 'Na_links', 511))

    gauge_points.append(fit_peak(T, 'Daten/011-Ba-Spek-l.txt', 380, 535, [450, 40, 63000, 0], 'Ba_links', 31))
    gauge_points.append(fit_peak(T, 'Daten/011-Ba-Spek-l.txt', 1080, 1295, [1200, 40, 1200, 0], 'Ba_links', 81))
    gauge_points.append(fit_peak(T, 'Daten/011-Ba-Spek-l.txt', 4543, 5164, [4834, 40, 9300, 0], 'Ba_links', 356))

    fit_gauge_points(T, gauge_points, 'links')

def job_energieeichung_rechts(T):
    gauge_points = []

    gauge_points.append(fit_peak(T, 'Daten/003-Na-Spektrum.txt', 6000, 7000, [6400, 500, 100, 0], 'Na_rechts', 511))

def job_moseley(T):
    Z = 56
    nu = 3/4 * R_infinity * c * (Z - 1)**2

    E = h * nu
    E_keV = E / e / 10**3

    T['E_K_alpha_Ba_keV'] = unitprint.siunitx(E_keV)

def main():
    T = {}

    job_moseley(T)
    job_energieeichung_rechts(T)
    job_energieeichung_links(T)

    with open('_build/template.js', 'w') as f:
        json.dump(dict(T), f, indent=4, sort_keys=True)

if __name__ == "__main__":
    main()
