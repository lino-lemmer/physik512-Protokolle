#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright © 2013-2014 Martin Ueding <dev@martin-ueding.de>
# Licensed under The GNU Public License Version 2 (or later)

import argparse
import json
import logging
import multiprocessing

import matplotlib.pyplot as pl
import numpy as np
import scipy.optimize as op
import unitprint


savefig_options = {
    'bbox_inches': 'tight',
}

def setup_logging(options):
    if options.verbose == 0:
        level = logging.WARNING
    elif options.verbose == 1:
        level = logging.INFO
    elif options.verbose == 2:
        level = logging.DEBUG

    logging.basicConfig(level=level)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-v', '--verbose', action='count', default=0)
    options = parser.parse_args()

    setup_logging(options)

    with multiprocessing.Manager() as manager:
        T = manager.dict()

        l = globals()
        to_run = []
        for key, value in l.items():
            if key.startswith('job_'):
                to_run.append(value)

        logging.debug('Will run the following functions:')
        for f in to_run:
            logging.debug('-', f)

        processes = []
        for f in to_run:
            p = multiprocessing.Process(target=f, args=(T,))
            logging.debug("Starting", p)
            p.start()
            processes.append(p)

        for p in processes:
            logging.debug("Waiting for", p)
            p.join()

        assert all([p.exitcode == 0 for p in processes])

        logging.debug("Serializing …")

        with open('_build/template.js', 'w') as f:
            json.dump(dict(T), f, indent=4, sort_keys=True)

if __name__ == "__main__":
    main()
